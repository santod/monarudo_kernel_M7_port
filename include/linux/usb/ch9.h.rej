--- include/linux/usb/ch9.h	2013-01-04 04:01:33.000000000 -0800
+++ include/linux/usb/ch9.h	2013-03-19 04:00:53.000000000 -0700
@@ -61,79 +1,47 @@
  * are at most sixteen features of each type.)  Hubs may also support a
  * new USB_REQ_TEST_AND_SET_FEATURE to put ports into L1 suspend.
  */
-#define USB_DEVICE_SELF_POWERED		0	/* (read only) */
-#define USB_DEVICE_REMOTE_WAKEUP	1	/* dev may initiate wakeup */
-#define USB_DEVICE_TEST_MODE		2	/* (wired high speed only) */
-#define USB_DEVICE_BATTERY		2	/* (wireless) */
-#define USB_DEVICE_B_HNP_ENABLE		3	/* (otg) dev may initiate HNP */
-#define USB_DEVICE_WUSB_DEVICE		3	/* (wireless)*/
-#define USB_DEVICE_A_HNP_SUPPORT	4	/* (otg) RH port supports HNP */
-#define USB_DEVICE_A_ALT_HNP_SUPPORT	5	/* (otg) other RH port does */
-#define USB_DEVICE_DEBUG_MODE		6	/* (special devices only) */
+#define USB_DEVICE_SELF_POWERED		0	
+#define USB_DEVICE_REMOTE_WAKEUP	1	
+#define USB_DEVICE_TEST_MODE		2	
+#define USB_DEVICE_BATTERY		2	
+#define USB_DEVICE_B_HNP_ENABLE		3	
+#define USB_DEVICE_WUSB_DEVICE		3	
+#define USB_DEVICE_A_HNP_SUPPORT	4	
+#define USB_DEVICE_A_ALT_HNP_SUPPORT	5	
+#define USB_DEVICE_DEBUG_MODE		6	
 
-/*
- * Test Mode Selectors
- * See USB 2.0 spec Table 9-7
- */
 #define	TEST_J		1
 #define	TEST_K		2
 #define	TEST_SE0_NAK	3
 #define	TEST_PACKET	4
 #define	TEST_FORCE_EN	5
 
-/* OTG test mode feature bits
- * See ECN OTG2.0 spec Table 6-8
- */
 #define TEST_OTG_SRP_REQD	6
 #define TEST_OTG_HNP_REQD	7
 
-/*
- * New Feature Selectors as added by USB 3.0
- * See USB 3.0 spec Table 9-6
- */
-#define USB_DEVICE_U1_ENABLE	48	/* dev may initiate U1 transition */
-#define USB_DEVICE_U2_ENABLE	49	/* dev may initiate U2 transition */
-#define USB_DEVICE_LTM_ENABLE	50	/* dev may send LTM */
-#define USB_INTRF_FUNC_SUSPEND	0	/* function suspend */
+#define USB_DEVICE_U1_ENABLE	48	
+#define USB_DEVICE_U2_ENABLE	49	
+#define USB_DEVICE_LTM_ENABLE	50	
+#define USB_INTRF_FUNC_SUSPEND	0	
 
 #define USB_INTR_FUNC_SUSPEND_OPT_MASK	0xFF00
-/*
- * Suspend Options, Table 9-7 USB 3.0 spec
- */
 #define USB_INTRF_FUNC_SUSPEND_LP	(1 << (8 + 0))
 #define USB_INTRF_FUNC_SUSPEND_RW	(1 << (8 + 1))
 
-#define USB_ENDPOINT_HALT		0	/* IN/OUT will STALL */
+#define USB_ENDPOINT_HALT		0	
 
 #define OTG_STATUS_SELECTOR		0xF000
 #define HOST_REQUEST_FLAG		0
-#define THOST_REQ_POLL			1500    /* msec (1000 - 2000) */
-#define OTG_TTST_SUSP			70	/* msec (0 - 100) */
+#define THOST_REQ_POLL			1500    
+#define OTG_TTST_SUSP			70	
 
 #define OTG_TTST_VBUS_OFF               1
 
-/* Bit array elements as returned by the USB_REQ_GET_STATUS request. */
-#define USB_DEV_STAT_U1_ENABLED		2	/* transition into U1 state */
-#define USB_DEV_STAT_U2_ENABLED		3	/* transition into U2 state */
-#define USB_DEV_STAT_LTM_ENABLED	4	/* Latency tolerance messages */
-
-/**
- * struct usb_ctrlrequest - SETUP data for a USB device control request
- * @bRequestType: matches the USB bmRequestType field
- * @bRequest: matches the USB bRequest field
- * @wValue: matches the USB wValue field (le16 byte order)
- * @wIndex: matches the USB wIndex field (le16 byte order)
- * @wLength: matches the USB wLength field (le16 byte order)
- *
- * This structure is used to send control requests to a USB device.  It matches
- * the different fields of the USB 2.0 Spec section 9.3, table 9-2.  See the
- * USB spec for a fuller description of the different fields, and what they are
- * used for.
- *
- * Note that the driver for any interface can issue control requests.
- * For most devices, interfaces don't coordinate with each other, so
- * such requests may be made at any time.
- */
+#define USB_DEV_STAT_U1_ENABLED		2	
+#define USB_DEV_STAT_U2_ENABLED		3	
+#define USB_DEV_STAT_LTM_ENABLED	4	
+
 struct usb_ctrlrequest {
 	__u8 bRequestType;
 	__u8 bRequest;
